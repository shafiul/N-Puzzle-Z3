MODULE main
  VAR
    car : {1, 2, 3};

    r1 : boolean;
    r2 : boolean;
    r3 : boolean;

    mode : {stop, run};

    dir : {up, down, none};

    d1  : {open, closed};
    d2  : {open, closed};
    d3  : {open, closed};
    dc  : {open, closed};

    rc  : 0..100;                 -- counter for run mode

  DEFINE
    MAXRUN  := 2; 


  ASSIGN

    init(car) := 1;                                 -- Assumption
    init(dir) := up;

    init(rc)  :=  0;


    init(mode) := stop;

    init(d1)    :=  open;
    init(d2)    :=  closed;
    init(d3)    :=  closed;
    init(dc)    :=  open;

    init(r1)    :=  TRUE;

                              ---- mode ---

    next(mode) := case

      mode = stop & ( (car = 1 & (r2|r3)) | (car = 2 & (r1|r3)) | (car = 3 & (r1|r2)) ) : run; 

--      mode = stop & ( (car = 1 & (r1 | !r1 | !r2 | !r3) ) )

      mode = run : case
                      rc < MAXRUN   : run;
                      rc >= MAXRUN  : stop;
                  esac;                     
      TRUE: mode;

    esac;

                              ---- rc (run counter) ---

    next(rc) := case
      next(mode)=stop                           : 0;
      mode=run & rc < MAXRUN                    : rc + 1;
      TRUE                                      : rc;
    esac;

                              ---- car ---

    next(car) := case

      mode=stop & next(mode) = run & ( (car = 1 & (r2|r3))  ) : 2; 

      mode=stop & next(mode) = run & ( (car = 2 & (r1|r3))  ) : case
              dir = up    : 3;
              dir = down  : 1;
              dir = none  : {1, 2};
            esac; 

      mode=stop & next(mode) = run & ( (car = 3 & (r1|r2))  ) : 2;
      TRUE: car;   

    esac;


                              ---- direction ---

    next(dir) := case

      next(mode) = stop: case
          car = 1: up;
          car = 3: down;
          car = 2 & r1 & !r3: down;
          car = 2 & !r1 & r3: up;
          car = 2 & !r1 & !r3: none;
          TRUE: dir;
        esac;

      TRUE: dir;
    esac;

                              ---- request ---

    next(r1) := case
      r1 & next(mode) = stop & next(car) = 1: FALSE;
      TRUE: r1; 
    esac;

    next(r2) := case
      r2 & next(mode) = stop & next(car) = 2: FALSE;
      TRUE: r2; 
    esac;

    next(r3) := case
      r3 & next(mode) = stop & next(car) = 3: FALSE;
      TRUE: r3; 
    esac;


                              ---- Doors ---

    next(d1) := case
      next(mode) = run  | next(car) != 1        :       closed;
      next(mode) = stop & car = 1 & r1          :       open;
      TRUE                                      :       d1;
    esac;

    next(d2) := case
      next(mode) = run  | next(car) != 2        :       closed;
      next(mode) = stop & car = 2 & r2          :       open;
      TRUE                                      :       d2;
    esac;

    next(d3) := case
      next(mode) = run  | next(car) != 3        :       closed;
      next(mode) = stop & car = 3 & r3          :       open;
      TRUE                                      :       d3;
    esac;

    next(dc) := case
      next(mode) = run                          :       closed;
      next(mode) = stop                         :       case
                                                            car = 1 & r1  : open;
                                                            car = 2 & r2  : open;
                                                            car = 3 & r3  : open;
                                                            TRUE          : dc;
                                                            esac;
      TRUE                                      :       dc;
    esac;


                              ---- SPECIFICATIONS ---


-- (i) --
-- It is always the case that if an elevator car is not at a particular floor, then the doors to the
-- corresponding elevator shaft on that floor are closed.


INVARSPEC
  ((mode=run | car != 1) -> d1=closed) & ((mode=run | car != 2) -> d2=closed) & ((mode=run | car != 3) -> d3=closed);


 -- (ii) --
 
-- It is always the case that if an elevator car is at a particular floor, then eventually both the
-- doors to the corresponding elevator shaft on that floor open and the doors to the elevator
-- car open. 

--LTLSPEC
  --G( ((mode=stop & car=1) -> F(d1=open)) & ((mode=stop & car=2) -> F(d2=open)) & ((mode=stop & car=3) -> F(d3=open))  );


-- It is always the case that if an elevator car is at a particular floor
-- AND that floor has been requested, then eventually both the doors to the
-- corresponding elevator shaft on that floor open and the doors to the elevator
-- car open

LTLSPEC
  G( ((mode=stop & car=1 & r1) -> F(d1=open & dc=open))  &  ((mode=stop & car=2 & r2) -> F(d2=open & dc=open)) & ((mode=stop & car=3 & r3) -> F(d3=open & dc=open))  );


-- (iii) -- 
--It is always the case that if an elevator car is moving, then the doors to the corresponding
--elevator shaft are closed on every floor.

INVARSPEC
  (mode=run) -> d1=closed & d2=closed & d3=closed;


-- (iv) --
-- It is always the case that if an elevator car is requested to go to a particular floor, then
-- eventually the elevator car arrives at that floor.

LTLSPEC
  G ( (r1 -> F (mode=stop & car = 1)) & (r2 -> F (mode=stop & car = 2)) & (r3 -> F (mode=stop & car = 3)) );


-- (v) 

-- It is always the case that, for any floor, the elevator car doors are closed if and only if the
-- elevator shaft doors are closed on that floor.

INVARSPEC
  ((car=1 -> dc=closed) <-> ( car=1 -> d1=closed)) & ((car=2 -> dc=closed) <-> ( car=2 -> d2=closed)) & ((car=3 -> dc=closed) <-> ( car=3 -> d3=closed)) ;


-- (vi) -- 
-- The elevator shaft doors on different floors are never simultaneously open.

INVARSPEC
  (d1=open -> d2=closed & d3=closed) & (d2=open -> d1=closed & d3=closed) & (d3=open -> d2=closed & d1=closed)


LTLSPEC 
  G F (mode=run);